version: '3.8'
services:
  db:
    image: postgres:13-alpine
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_USER: backend
      POSTGRES_DB: backend
      POSTGRES_PASSWORD: backend
      PG_SYSTEM_MAX_CONNECTIONS: 200
    command: ['-c', 'max_connections=200', '-c', 'log_statement=all']
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - common-network

  minio:
    image: minio/minio:RELEASE.2020-12-12T08-39-07Z
    volumes:
      - minio-data:/data
    ports:
      - ${MINIO_PORT}:9000
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      MINIO_API_CORS_ALLOW_ORIGIN: '*'
    entrypoint: minio server /data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - common-network

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    restart: on-failure:10
    entrypoint:
      - /bin/sh
      - -c
      - |
        /usr/bin/mc config host rm local;
        /usr/bin/mc config host add --quiet --api s3v4 local http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
        /usr/bin/mc rb --force local/${AWS_S3_BUCKET}/;
        /usr/bin/mc mb --quiet local/${AWS_S3_BUCKET}/;
        /usr/bin/mc policy set public local/${AWS_S3_BUCKET};
    networks:
      - common-network

volumes:
  db-data:
  minio-data:

networks:
  common-network:
    driver: bridge
